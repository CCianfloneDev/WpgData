@page "/CouncilMemberExpenses"
@using Finance.Components.Data
@using Finance.Components.Services
@using MudBlazor
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject WardExpenseService WardExpenseService

<PageTitle>Council Member Expenses</PageTitle>

@if (councilMemberExpenses == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <MudDataGrid Items="councilMemberExpenses" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter" 
    Hideable="true">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Council Member Expenses</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="expense => expense.JournalDate" Title="Journal Date" />
            <PropertyColumn Property="expense => expense.WardOffice" Title="Ward Office" />
            <PropertyColumn Property="expense => expense.CouncilMember" Title="Council Member" />
            <PropertyColumn Property="expense => expense.Vendor" Title="Vendor" />
            <PropertyColumn Property="expense => expense.ExpenseType" Title="Expense Type" />
            <PropertyColumn Property="expense => expense.Description" Title="Description" />
            <PropertyColumn Property="expense => expense.Account" Title="Account" />
            <PropertyColumn Property="expense => expense.AmountNumeric" Title="Amount" />
        </Columns>
        <PagerContent>
            <MudDataGridPager T="WardExpense" />
        </PagerContent>
    </MudDataGrid>

    <MudPaper Class="pa-4">
        <MudText Typo="Typo.h6">Council Member Expenses Pie Chart - By Council Member</MudText>
        <MudChart ChartType="ChartType.Donut" Width="500px" Height="500px" LegendPosition="Position.Right"
        InputData="@councilMemberCounts" InputLabels="@councilMemberNames"></MudChart>
    </MudPaper>
}

@code {
    private string _searchString = "";
    private List<WardExpense>? councilMemberExpenses;
    private double[]? councilMemberCounts;
    private string[]? councilMemberNames;

    protected override async Task OnInitializedAsync()
    {
        councilMemberExpenses = await WardExpenseService.GetExpensesAsync();
        councilMemberCounts = WardExpenseService.GetCouncilMemberCounts();
        councilMemberNames = WardExpenseService.GetCouncilMemberNames();
    }

    // quick filter - filter globally across multiple columns with the same input
    private Func<WardExpense, bool> _quickFilter => expense =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if ($"{expense.JournalDate}".Contains(_searchString))
            return true;

        if (expense.WardOffice != null && expense.WardOffice.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (expense.CouncilMember != null && expense.CouncilMember.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (expense.Vendor != null && expense.Vendor.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (expense.ExpenseType != null && expense.ExpenseType.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (expense.Description != null && expense.Description.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (expense.Account != null && expense.Account.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (expense.Amount != null && expense.Amount.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;                   
        }

        return false;
    };
}
